generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  CHEF
}

enum SiteType {
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  TIKTOK
  BLOG
  OTHER
}

// 作成中、下書き、公開、非公開
enum RecipeStatus {
  CREATING
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

model User {
  id            String         @id @default(uuid())
  googleId      String?        @unique @map("google_id")
  name          String?        @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  chef          Chef?
  follows       Follow[]
  likes         Like[]
  shoppingLists ShoppingList[]
  shoppingMemos ShoppingMemo[]

  @@map("users")
}

model Chef {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique @map("user_id")
  role      Role     @default(USER)
  name      String   @db.VarChar(255)
  profile   String?
  imageUrl  String?  @map("image_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  links     Link[]
  follows   Follow[]
  recipes   Recipe[]

  @@map("chefs")
}

model Follow {
  chef      Chef     @relation(fields: [chefId], references: [id])
  chefId    String   @map("chef_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([chefId, userId])
  @@map("follows")
}

model Link {
  id          String   @id @default(uuid())
  siteType    SiteType @map("site_type")
  chef        Chef     @relation(fields: [chefId], references: [id])
  chefId      String   @map("chef_id")
  siteName    String   @map("site_name") @db.VarChar(255)
  url         String
  accountName String?  @map("account_name") @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("links")
}

model Recipe {
  id                String             @id @default(uuid())
  chef              Chef               @relation(fields: [chefId], references: [id])
  chefId            String             @map("chef_id")
  name              String?            @db.VarChar(255)
  overview          String?
  servingSize       Int                @map("serving_size") @db.SmallInt
  status            RecipeStatus       @default(CREATING)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  likes             Like[]
  recipeImages      RecipeImage[]
  recipeSteps       RecipeStep[]
  recipeIngredients RecipeIngredient[]
  shoppingLists     ShoppingList[]
  recipeLinks       RecipeLink[]

  @@map("recipes")
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @map("recipe_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([userId, recipeId])
  @@map("likes")
}

model RecipeImage {
  id        String   @id @default(uuid())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @map("recipe_id")
  imageUrl  String   @map("image_rul")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("recipe_images")
}

model RecipeStep {
  id          String   @id @default(uuid())
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    String   @map("recipe_id")
  step        Int      @db.SmallInt
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("recipe_steps")
}

model RecipeLink {
  id        String   @id @default(uuid())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @map("recipe_id")
  url       String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("recipe_links")
}

model RecipeIngredient {
  id        String   @id @default(uuid())
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  recipeId  String   @map("recipe_id")
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("recipe_ingredients")
}

model ShoppingList {
  id                      String                   @id @default(uuid())
  user                    User                     @relation(fields: [userId], references: [id])
  userId                  String                   @map("user_id")
  recipe                  Recipe                   @relation(fields: [recipeId], references: [id])
  recipeId                String                   @map("recipe_id")
  sortOrder               Int                      @default(0) @map("sort_order") @db.SmallInt
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  shoppingListIngredients ShoppingListIngredient[]

  @@map("shopping_lists")
}

model ShoppingListIngredient {
  id             String       @id @default(uuid())
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  shoppingListId String       @map("shopping_list_id")
  name           String       @db.VarChar(255)
  isBought       Boolean      @default(false) @map("is_bought")
  sortOrder      Int          @default(0) @map("sort_order") @db.SmallInt
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  @@map("shopping_list_ingredients")
}

model ShoppingMemo {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  text      String   @db.VarChar(255)
  isBought  Boolean  @default(false) @map("is_bought")
  sortOrder Int      @default(0) @map("sort_order") @db.SmallInt
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("shopping_memos")
}
